package kr.or.ddit.common.controller;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.stereotype.Component;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class CustomSocketHandler extends TextWebSocketHandler {
	
	Map<String, WebSocketSession> users = new ConcurrentHashMap<String, WebSocketSession>();

	Map<String, WebSocketSession> listMap = new ConcurrentHashMap<String, WebSocketSession>();
	Map<String, WebSocketSession> alarmMap = new ConcurrentHashMap<String, WebSocketSession>();
	Map<String, WebSocketSession> chatRoomMap = new ConcurrentHashMap<String, WebSocketSession>();
	
	// 연결되었을떄
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		System.out.println("연결됨 : " + session.getId());
//		Map<String, String> userInfo = 
		super.afterConnectionEstablished(session);
	}

	// 연결끊겼을때
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		System.out.println("연결끊김 : " + session.getId());
		super.afterConnectionClosed(session, status);
	}

	// 클라이언트(브라우저)에서 서버로 메시지를 보냈을때
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		// 메시지가 들어오는 부분
		String strMessage = message.getPayload();
		System.out.println("메시지 : " + strMessage);
		super.handleTextMessage(session, message);
	}
}
